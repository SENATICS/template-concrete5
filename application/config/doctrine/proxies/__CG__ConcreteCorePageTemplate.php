<?php

namespace DoctrineProxies\__CG__\Concrete\Core\Page;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Template extends \Concrete\Core\Page\Template implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'pTemplateID', 'pTemplateHandle', 'pTemplateIcon', 'pTemplateName', 'pTemplateIsInternal', 'pkgID');
        }

        return array('__isInitialized__', 'pTemplateID', 'pTemplateHandle', 'pTemplateIcon', 'pTemplateName', 'pTemplateIsInternal', 'pkgID');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Template $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function export($node)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'export', array($node));

        return parent::export($node);
    }

    /**
     * {@inheritDoc}
     */
    public function getPageTemplateID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPageTemplateID', array());

        return parent::getPageTemplateID();
    }

    /**
     * {@inheritDoc}
     */
    public function getPageTemplateName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPageTemplateName', array());

        return parent::getPageTemplateName();
    }

    /**
     * {@inheritDoc}
     */
    public function getPageTemplateHandle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPageTemplateHandle', array());

        return parent::getPageTemplateHandle();
    }

    /**
     * {@inheritDoc}
     */
    public function isPageTemplateInternal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPageTemplateInternal', array());

        return parent::isPageTemplateInternal();
    }

    /**
     * {@inheritDoc}
     */
    public function getPageTemplateIcon()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPageTemplateIcon', array());

        return parent::getPageTemplateIcon();
    }

    /**
     * {@inheritDoc}
     */
    public function getPackageID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackageID', array());

        return parent::getPackageID();
    }

    /**
     * {@inheritDoc}
     */
    public function getPackageHandle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackageHandle', array());

        return parent::getPackageHandle();
    }

    /**
     * {@inheritDoc}
     */
    public function getPageTemplateDisplayName($format = 'html')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPageTemplateDisplayName', array($format));

        return parent::getPageTemplateDisplayName($format);
    }

    /**
     * {@inheritDoc}
     */
    public function delete()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'delete', array());

        return parent::delete();
    }

    /**
     * {@inheritDoc}
     */
    public function update($pTemplateHandle, $pTemplateName, $pTemplateIcon = 'full.png')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'update', array($pTemplateHandle, $pTemplateName, $pTemplateIcon));

        return parent::update($pTemplateHandle, $pTemplateName, $pTemplateIcon);
    }

    /**
     * {@inheritDoc}
     */
    public function getIcons()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIcons', array());

        return parent::getIcons();
    }

    /**
     * {@inheritDoc}
     */
    public function getPageTemplateIconImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPageTemplateIconImage', array());

        return parent::getPageTemplateIconImage();
    }

}
